{"version":3,"sources":["components/score.js","components/card.js","components/gameboard.js","components/win.js","components/instructions.js","App.js","index.js"],"names":["Scoreboard","props","className","current","highest","Card","pokemonNumber","pokemonName","i","handleClick","onClick","src","alt","Gameboard","allPokemon","currentSet","map","number","name","renderPokemon","Win","handleGameReset","Instructions","App","useState","error","setError","isLoaded","setIsLoaded","currentScore","setCurrentScore","highScore","setHighScore","setAllPokemon","allPokemonNumbers","setAllPokemonNumbers","remainingPokemonNumbers","setRemainingPokemonNumbers","setCurrentSet","setNumber","setSetNumber","maxSetSize","setMaxSetSize","randomizeSet","set","tempSet","length","j","Math","floor","random","useEffect","pokemonNumbers","Array","keys","localStorage","pokemon","savedPokemon","JSON","parse","console","log","fetch","then","res","json","results","stringify","newSet","setSize","push","parseInt","slice","message","tempCurrentScore","tempCurrentSet","toString","every","item","removeCurrentSet","size","forEach","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7fbc51c6.chunk.js","sourcesContent":["const Scoreboard = (props) => {\n  return (\n    <div className='scoreboard'>\n      <p className='current-score'>Current Score: {props.current}</p>\n      <p className='high-score'>High Score: {props.highest}</p>\n    </div>\n  );\n};\n\nexport default Scoreboard;\n","const Card = (props) => {\n  const { pokemonNumber, pokemonName, i, handleClick } = props;\n\n  return (\n    <figure className='card' onClick={() => handleClick(i)}>\n      <img\n        src={`https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/other/dream-world/${pokemonNumber}.svg`}\n        alt={`${pokemonName}`}\n      />\n      <figcaption>{pokemonName}</figcaption>\n    </figure>\n  );\n};\n\nexport default Card;\n","import Card from './card';\n\nconst Gameboard = (props) => {\n  const { allPokemon, currentSet, handleClick } = props;\n\n  const renderPokemon = (number, i) => {\n    return (\n      <Card\n        key={allPokemon[number[0]].name}\n        pokemonNumber={number[0] + 1}\n        pokemonName={allPokemon[number[0]].name}\n        i={i}\n        handleClick={handleClick}\n      />\n    );\n  };\n\n  return (\n    <div className='gameboard'>\n      {currentSet.map((number, i) => renderPokemon(number, i))}\n    </div>\n  );\n};\n\nexport default Gameboard;\n","const Win = (props) => {\n  const { handleGameReset } = props;\n\n  return (\n    <div className='gameboard complete'>\n      <img src='./img/win.jpg' alt='Pokemon Celebration' />\n      <div>\n        <h2>Congratulations!</h2>\n        <p>You Win!</p>\n        <button onClick={handleGameReset}>Play Again</button>\n      </div>\n    </div>\n  );\n};\n\nexport default Win;\n","const Instructions = () => {\n  return <h3>Can you click all 151 Pokemon?</h3>;\n};\n\nexport default Instructions;\n","import React, { useState, useEffect } from 'react';\nimport Scoreboard from './components/score';\nimport Gameboard from './components/gameboard';\nimport Win from './components/win';\nimport './App.css';\nimport Instructions from './components/instructions';\n\nfunction App() {\n  const [error, setError] = useState(null);\n  const [isLoaded, setIsLoaded] = useState(false);\n\n  const [currentScore, setCurrentScore] = useState(0);\n  const [highScore, setHighScore] = useState(0);\n\n  const [allPokemon, setAllPokemon] = useState([]);\n  const [allPokemonNumbers, setAllPokemonNumbers] = useState([]);\n  const [remainingPokemonNumbers, setRemainingPokemonNumbers] = useState([]);\n\n  const [currentSet, setCurrentSet] = useState([]);\n  const [setNumber, setSetNumber] = useState(1);\n  const [maxSetSize, setMaxSetSize] = useState(5);\n\n  const randomizeSet = (set) => {\n    // https://stackoverflow.com/a/54814423/12843016\n    let tempSet = set;\n\n    for (let i = tempSet.length - 1; i > 0; i--) {\n      let j = Math.floor(Math.random() * (i + 1));\n      [tempSet[i], tempSet[j]] = [tempSet[j], tempSet[i]];\n    }\n\n    setCurrentSet(tempSet);\n  };\n\n  const handleClick = (i) => {\n    let tempCurrentScore = currentScore;\n    const tempCurrentSet = [...currentSet];\n\n    if (currentSet[i][1] === false) {\n      tempCurrentSet[i][1] = true;\n\n      tempCurrentScore += 1;\n      while (currentSet.toString() === tempCurrentSet.toString()) {\n        randomizeSet(tempCurrentSet);\n      }\n\n      setCurrentScore(tempCurrentScore);\n      if (tempCurrentScore > highScore) setHighScore(tempCurrentScore);\n\n      if (currentSet.every((item) => item[1] === true)) {\n        const removeCurrentSet = remainingPokemonNumbers.slice(currentSet.length);\n        setRemainingPokemonNumbers(removeCurrentSet);\n\n        let i = setNumber;\n        i++;\n        setSetNumber(i);\n\n        if (setNumber % 2 === 0) {\n          let size = maxSetSize;\n\n          remainingPokemonNumbers.length - maxSetSize * 2 < maxSetSize\n            ? (size = remainingPokemonNumbers.length)\n            : size++;\n\n          setMaxSetSize(size);\n        }\n      }\n    } else {\n      setCurrentScore(0);\n      setSetNumber(1);\n      setMaxSetSize(5);\n      setRemainingPokemonNumbers(allPokemonNumbers);\n\n      tempCurrentSet.forEach((item) => (item[1] = false));\n      randomizeSet(tempCurrentSet);\n    }\n  };\n\n  const handleGameReset = () => {\n    setHighScore(currentScore);\n    setCurrentScore(0);\n    setSetNumber(1);\n    setMaxSetSize(5);\n    setRemainingPokemonNumbers(allPokemonNumbers);\n  };\n\n  useEffect(() => {\n    const pokemonNumbers = [...Array(151).keys()];\n    randomizeSet(pokemonNumbers);\n\n    setCurrentScore(0);\n    setSetNumber(1);\n    setMaxSetSize(5);\n    setRemainingPokemonNumbers(pokemonNumbers);\n    setAllPokemonNumbers(pokemonNumbers);\n\n    if (localStorage.pokemon) {\n      const savedPokemon = JSON.parse(localStorage.pokemon);\n      setAllPokemon(savedPokemon);\n      setIsLoaded(true);\n    } else {\n      console.log('PokeAPI Called');\n\n      fetch('https://pokeapi.co/api/v2/pokemon?limit=151')\n        .then((res) => res.json())\n        .then(\n          (pokemon) => {\n            setAllPokemon(pokemon.results);\n            setIsLoaded(true);\n            localStorage.pokemon = JSON.stringify(pokemon.results);\n          },\n          (error) => {\n            setError(error);\n          }\n        );\n    }\n  }, []);\n\n  useEffect(() => {\n    const newSet = [];\n    const setSize =\n      remainingPokemonNumbers.length >= maxSetSize\n        ? maxSetSize\n        : remainingPokemonNumbers.length;\n\n    for (let i = 0; i < setSize; i++) {\n      newSet.push([parseInt(remainingPokemonNumbers.slice(i, i + 1)), false]);\n    }\n\n    setCurrentSet(newSet);\n  }, [maxSetSize, remainingPokemonNumbers]);\n\n  if (error) {\n    return (\n      <div className='memory-card'>\n        <Instructions />\n        <Scoreboard current={currentScore} highest={highScore} />\n        <p className='gameboard error'>Error Loading Pokemon - {error.message}</p>\n      </div>\n    );\n  } else if (!isLoaded) {\n    return (\n      <div className='memory-card'>\n        <Instructions />\n        <Scoreboard current={currentScore} highest={highScore} />\n        <p className='gameboard loading'>Loading Pokemon...</p>\n      </div>\n    );\n  } else {\n    return remainingPokemonNumbers.length > 0 ? (\n      <div className='memory-card'>\n        <Instructions />\n        <Scoreboard current={currentScore} highest={highScore} />\n        <Gameboard\n          handleClick={handleClick}\n          allPokemon={allPokemon}\n          currentSet={currentSet}\n        />\n      </div>\n    ) : (\n      <div className='memory-card'>\n        <Instructions />\n        <Scoreboard current={currentScore} highest={highScore} />\n        <Win handleGameReset={handleGameReset} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('app')\n);"],"sourceRoot":""}